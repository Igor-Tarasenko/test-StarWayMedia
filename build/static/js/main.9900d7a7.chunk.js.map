{"version":3,"sources":["components/FilmCard/image-not-available.png","components/InputSearch/Input.js","components/FilmCard/FilmCard.js","ApiService.js","App.js","serviceWorker.js","components/CurrentFilm/PageNotFound.js","components/CurrentFilm/CurrentFilm.js","index.js"],"names":["module","exports","Input","props","className","onChange","e","handleChange","target","value","type","id","placeholder","FilmCard","posterImg","poster","image","src","alt","filmName","dateRelease","rating","axiosInstance","axios","create","timeout","baseURL","apiKey","ApiService","search","formattedSearch","replace","get","params","api_key","query","data","console","log","message","movieId","App","state","movies","debounce","text","a","searchMovies","setState","this","results","length","map","movie","index","key","to","title","release_date","vote_average","poster_path","Component","Boolean","window","location","hostname","match","PageNotFound","CurrentFilm","isLoaded","isError","getMovieById","original_title","overview","budget","genres","genre","name","spoken_languages","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9900d7a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image-not-available.ae064f22.png\";","import React from 'react'\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <form className=\"searchForm\">\r\n                        <div className=\"form-group\">\r\n                            <input onChange={e => props.handleChange(e.target.value)} type=\"text\" className=\"form-control input-search\" id=\"searchInput\" placeholder=\"Start enter film\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Input;\r\n","import React from 'react'\r\nimport image from './image-not-available.png'\r\n\r\nconst FilmCard = (props) => {\r\n    let posterImg =\"\";\r\n    if (props.poster == null) {\r\n        posterImg = image;\r\n    } else {\r\n        posterImg = \"https://image.tmdb.org/t/p/w200\" + props.poster;\r\n    }\r\n    return (\r\n        <div className=\"filmCardBlock\">\r\n            <div className=\"filmCard\">\r\n                <img src={posterImg} alt=\"film_poster\" className=\"poster\"/>\r\n                <h2 className=\"title\">{props.filmName}</h2>\r\n                <div className=\"flex-block\">\r\n                    <div className=\"genre\">\r\n                        <p>date release:</p>\r\n                        <p>{props.dateRelease}</p>\r\n                    </div>\r\n                    <div className=\"rating\">\r\n                        <p>rating</p>\r\n                        <p>{props.rating}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default FilmCard;","import axios from 'axios';\r\n\r\nconst baseURL = 'https://api.themoviedb.org/3/';\r\nconst axiosInstance = axios.create({\r\n    timeout: 1000,\r\n    baseURL,\r\n});\r\nconst apiKey = 'c596fd9a2bdde543f91ec6b94a4c0c3c';\r\n\r\nexport class ApiService {\r\n    static async searchMovies(search) {\r\n        try {\r\n            const formattedSearch = search.replace(' ', '+');\r\n            const { data } = await axiosInstance.get('search/movie', {\r\n                params: {\r\n                    api_key: apiKey,\r\n                    query: formattedSearch\r\n                }\r\n            });\r\n            return data;\r\n        } catch(e) {\r\n            console.log('Error during searching movie: ', e.message);\r\n        }\r\n    }\r\n\r\n    static getMovieById(movieId) {\r\n        return axiosInstance.get(`movie/${movieId}`, {\r\n            params: { api_key: apiKey }\r\n        });\r\n    }\r\n}","import React, {Component} from 'react'\nimport Input from \"./components/InputSearch/Input\";\nimport FilmCard from \"./components/FilmCard/FilmCard\";\nimport {ApiService} from \"./ApiService\";\nimport {debounce} from \"lodash\";\nimport {Link} from 'react-router-dom'\n\n\nclass App extends Component {\n    state = {\n        movies: null\n    };\n\n    handleChange = debounce(async (text) => {\n        const movies = await ApiService.searchMovies(text);\n        await this.setState({ movies })\n    }, 500);\n\n    render() {\n        return (\n            <div className=\"main\">\n                <header>\n                    <Input handleChange={this.handleChange} />\n                </header>\n                <section>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            {\n                                this.state.movies ?\n                                    (this.state.movies.results.length) ?\n                                        this.state.movies.results.map((movie, index) => {\n                                            return (\n                                                <Link key={movie.id} className=\"col-lg-4\" to={`/`+ movie.id}>\n                                                    <FilmCard\n                                                        filmName={movie.title}\n                                                        id={movie.id}\n                                                        dateRelease={movie.release_date}\n                                                        rating={movie.vote_average}\n                                                        poster={movie.poster_path}\n                                                    />\n                                                </Link>\n                                            )\n                                        })\n                                        : <div className=\"error col-12\">Movie don't found, please try again</div>\n                                    : null\n                            }\n                        </div>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst PageNotFound = () => {\r\n    return (\r\n        <div className=\"container error\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <p>Ooops.. Page not found</p>\r\n                    <p className=\"big-text\">404</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default PageNotFound;","import React, {Component} from 'react'\r\nimport image from '../FilmCard/image-not-available.png'\r\nimport {ApiService} from \"../../ApiService\";\r\nimport PageNotFound from \"./PageNotFound\";\r\n\r\n\r\nexport default class CurrentFilm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movie: null,\r\n            isLoaded: true,\r\n            isError: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const movie = await ApiService.getMovieById(this.props.match.params.id);\r\n            this.setState({\r\n                movie,\r\n                isLoaded: !this.state.isLoaded\r\n            })\r\n        } catch(e) {\r\n            console.log('Error during getting movie: ', e.message);\r\n            this.setState({\r\n                isLoaded: !this.state.isLoaded,\r\n                isError: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render () {\r\n        if (this.state.isLoaded) {\r\n            return <div>Loading...</div>\r\n        } else if (this.state.isError) {\r\n            return <PageNotFound />\r\n        }\r\n        let posterImg =\"\";\r\n        if (this.state.movie.data.poster_path == null) {\r\n            posterImg = image;\r\n        } else {\r\n            posterImg = \"https://image.tmdb.org/t/p/w500\" + this.state.movie.data.poster_path;\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"currentFilmBlock\">\r\n                            <div className=\"filmCard row\">\r\n                                <div className=\"col-md-4 img-block\">\r\n                                    <img src={posterImg} alt=\"film_poster\" className=\"poster\"/>\r\n                                </div>\r\n                                <div className=\"col-md-8\">\r\n                                    <h2 className=\"title\">{this.state.movie.data.original_title}</h2>\r\n                                    <p className=\"description mr-block\">{this.state.movie.data.overview}</p>\r\n                                    <div className=\"flex-block mr-block\">\r\n                                        <p>Budget:</p>\r\n                                        <p>{this.state.movie.data.budget} $</p>\r\n                                    </div>\r\n                                    <div className=\"flex-block mr-block\">\r\n                                        <p>Genre:</p>\r\n                                        <p className=\"type-of-genre\">{\r\n                                            this.state.movie.data.genres.map((genre, index) => {\r\n                                                return (\r\n                                                    <span key={index}>{genre.name}</span>\r\n                                                )\r\n                                            })\r\n                                        }</p>\r\n                                    </div>\r\n                                    <div className=\"flex-block mr-block\">\r\n                                        <p>Date release:</p>\r\n                                        <p>{this.state.movie.data.release_date}</p>\r\n                                    </div>\r\n                                    <div className=\"flex-block mr-block\">\r\n                                        <p>Rating</p>\r\n                                        <p>{this.state.movie.data.vote_average}</p>\r\n                                    </div>\r\n                                    <div className=\"flex-block mr-block\">\r\n                                        <p>Language:</p>\r\n                                        <p>{this.state.movie.data.spoken_languages[0].name}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport CurrentFilm from \"./components/CurrentFilm/CurrentFilm\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/:id\" component={CurrentFilm} />\n        </Switch>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}